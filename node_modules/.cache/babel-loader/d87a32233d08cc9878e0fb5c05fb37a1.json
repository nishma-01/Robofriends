{"ast":null,"code":"import _classCallCheck from \"/Users/nishmamehta/Documents/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nishmamehta/Documents/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nishmamehta/Documents/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nishmamehta/Documents/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nishmamehta/Documents/robofriends/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nishmamehta/Documents/robofriends/src/App.js\";\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\nimport SearchBox from \"./SearchBox\";\nimport './App.css'; //APP COMPONENT HAS 2 STATES: \n//APP owns the state so any component that has state uses class syntax so can use constructor function to create this.state\n//State is what changes in an app, is what describes the app. Virtual DOM collects the state which is used by react to render them and apss them down as props to components (which are pure functions)\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.onSearchChange = function (event) {\n      _this.setState({\n        searchfield: event.target.value\n      }); //UPDATES SEARCHFIELD TO WHATEVER IS TYPED IN THE BOX\n\n    };\n\n    _this.state = {\n      robots: [],\n      searchfield: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('https://jsonplaceholder.typicode.com/users').then(function (response) {\n        return response.json();\n      }).then(function (users) {\n        _this2.setState({\n          robots: users\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    //MANAGE THE STATE HERE:\n    //with info from search box, can now communicate with the cardList and tell it to filter the robots state to now have only what includes in the searchfield\n    value: function render() {\n      var _this3 = this;\n\n      var filteredRobots = this.state.robots.filter(function (robots) {\n        return robots.name.toLowerCase().includes(_this3.state.searchfield.toLowerCase);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"f2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, \" RoboFriends\"), /*#__PURE__*/React.createElement(SearchBox, {\n        searchChange: this.onSearchChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(CardList, {\n        robots: filteredRobots,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //CONSIDER ONE WAY TOP-DOWN DATA FLOW AND THAT TO COMMUNICATE ACROSS CHILDREN RATHER THAN DOWN, NEED TO DEAL WITH 'STATE':\n//STATE is the description of the app, an object that describes the application\n//STATE can change dynamically, allows the communication between search bar and robots\n//PROPS are things that come out of state\n//parent feeds state into a child component and when received it becomes its property which can never change\n//need to create a constructor to define this.state\n//use event and on change to communicate between state and change in state, searchbox/robots:\n//every time 'on change' is triggered, call the 'search change' funciton which communicates with the parent","map":{"version":3,"names":["React","Component","CardList","SearchBox","App","onSearchChange","event","setState","searchfield","target","value","state","robots","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes"],"sources":["/Users/nishmamehta/Documents/robofriends/src/App.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport CardList from \"./CardList\";\nimport SearchBox from \"./SearchBox\";\nimport './App.css';\n\n//APP COMPONENT HAS 2 STATES: \n//APP owns the state so any component that has state uses class syntax so can use constructor function to create this.state\n//State is what changes in an app, is what describes the app. Virtual DOM collects the state which is used by react to render them and apss them down as props to components (which are pure functions)\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n      return response.json();\n    })\n    .then(users => {  \n    this.setState({ robots: users });\n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value }) //UPDATES SEARCHFIELD TO WHATEVER IS TYPED IN THE BOX\n  }\n  \n\n  //MANAGE THE STATE HERE:\n  //with info from search box, can now communicate with the cardList and tell it to filter the robots state to now have only what includes in the searchfield\n  render () {\n    const filteredRobots = this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase)\n    })\n    return (\n      <div className=\"tc\"> \n        <h1 className=\"f2\"> RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <CardList robots={filteredRobots}/>\n      </div>\n    );\n   }\n}\n\nexport default App;\n\n\n//CONSIDER ONE WAY TOP-DOWN DATA FLOW AND THAT TO COMMUNICATE ACROSS CHILDREN RATHER THAN DOWN, NEED TO DEAL WITH 'STATE':\n//STATE is the description of the app, an object that describes the application\n//STATE can change dynamically, allows the communication between search bar and robots\n//PROPS are things that come out of state\n//parent feeds state into a child component and when received it becomes its property which can never change\n\n//need to create a constructor to define this.state\n\n//use event and on change to communicate between state and change in state, searchbox/robots:\n//every time 'on change' is triggered, call the 'search change' funciton which communicates with the parent "],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;;IACMC,G;;;EACJ,eAAe;IAAA;;IAAA;;IACb;;IADa,MAiBfC,cAjBe,GAiBE,UAACC,KAAD,EAAW;MAC1B,MAAKC,QAAL,CAAc;QAAEC,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAA5B,CAAd,EAD0B,CACyB;;IACpD,CAnBc;;IAEb,MAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,EADG;MAEXJ,WAAW,EAAE;IAFF,CAAb;IAFa;EAMd;;;;wCAEmB;MAAA;;MAClBK,KAAK,CAAC,4CAAD,CAAL,CAAoDC,IAApD,CAAyD,UAAAC,QAAQ,EAAI;QACnE,OAAOA,QAAQ,CAACC,IAAT,EAAP;MACD,CAFD,EAGCF,IAHD,CAGM,UAAAG,KAAK,EAAI;QACf,MAAI,CAACV,QAAL,CAAc;UAAEK,MAAM,EAAEK;QAAV,CAAd;MACC,CALD;IAMD;;;IAOD;IACA;6BACU;MAAA;;MACR,IAAMC,cAAc,GAAG,KAAKP,KAAL,CAAWC,MAAX,CAAkBO,MAAlB,CAAyB,UAAAP,MAAM,EAAI;QACxD,OAAOA,MAAM,CAACQ,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmC,MAAI,CAACX,KAAL,CAAWH,WAAX,CAAuBa,WAA1D,CAAP;MACD,CAFsB,CAAvB;MAGA,oBACE;QAAK,SAAS,EAAC,IAAf;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAI,SAAS,EAAC,IAAd;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,kBADF,eAEE,oBAAC,SAAD;QAAW,YAAY,EAAE,KAAKhB,cAA9B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFF,eAGE,oBAAC,QAAD;QAAU,MAAM,EAAEa,cAAlB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAHF,CADF;IAOA;;;;EApCcjB,S;;AAuClB,eAAeG,GAAf,C,CAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA"},"metadata":{},"sourceType":"module"}